name: Deploy

on:
  workflow_dispatch: ~

jobs:
  deploy-proxy:
    name: Deploy proxy
    runs-on: ubuntu-24.04
    environment: proxy-production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master

      # Generate a preset version that increments every day whenever the preset is regenerated.
      # See the version format documentation in https://josm.openstreetmap.de/wiki/TaggingPresets#Thedocumentprologue
      - name: Generate preset version
        id: preset-version
        shell: bash
        run: |
          echo "version=$(/bin/date -u "+1.%Y%m%d-%Y-%m-%d")" >> $GITHUB_OUTPUT

      - name: Deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --config proxy.fly.toml --build-arg 'PRESET_VERSION=${{ steps.preset-version.outputs.version }}' --local-only

  generate-tiles-low-med:
    name: Generate low zoom tiles
    runs-on: ubuntu-24.04

    environment: tiles-production-low

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PMTiles
        uses: ./.github/actions/setup-pmtiles

      - name: Pull database
        run: |
          docker compose pull db
          docker compose up --no-build --pull never --wait db

      - name: Determine replication timestamp
        id: replication-timestamp
        continue-on-error: true
        run: |
          {
            echo -n 'timestamp='
            docker compose exec db \
              psql \
                --dbname gis \
                --user postgres \
                --pset format=csv \
                --pset tuples_only=on \
                --command "select \"value\" from osm2pgsql_properties where property='replication_timestamp'"
          } >> $GITHUB_OUTPUT

      - name: Generate tiles
        env:
          TILES: low-med
          BBOX: -180,-80,180,80
          REPLICATION_TIMESTAMP: ${{ steps.replication-timestamp.outputs.timestamp }}
        run: |
          docker compose run --no-deps martin-cp

      - name: List generated MBTiles
        run: |
          ls -lah tiles/*.mbtiles

      - name: Convert mbtiles to PMTiles
        run: |
          for file in tiles/*.mbtiles
          do 
            pmtiles convert "$file" "$(echo "$file" | sed 's/mbtiles$/pmtiles/')" || true
            rm -f "$file"
          done

      - name: List generated PMTiles
        run: |
          ls -lah tiles/*.pmtiles

      - name: Deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --config martin-static.fly.toml --local-only

  deploy-tiles:
    name: Deploy tiles per region

    strategy:
      fail-fast: false
      matrix:
        region:
          - africa
          - asia
          - europe
          - north-america
          - oceania
          - south-america

    uses: ./.github/workflows/deploy-tiles.yml
    with:
      region: ${{ matrix.region }}
    secrets: inherit

  deploy-api:
    name: Deploy API
    runs-on: ubuntu-24.04
    environment: api-production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull database
        run: |
          docker compose pull db
          docker compose up --no-build --pull never --wait db

      - name: Prepare and build API container
        env:
          SKIP_CLEANUP: 'yes'
        run: |
          api/prepare-api.sh

      - name: Print import logs
        if: ${{ always() }}
        run: |
          docker compose logs api-import

      - name: Deploy
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --config api.fly.toml --local-only api
